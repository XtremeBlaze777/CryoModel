// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cacti_interface.proto

#include "cacti_interface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cacti_5finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CactiInput_ConstParameter_cacti_5finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cacti_5finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CactiInput_TechnologyParameter_cacti_5finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cacti_5finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CactiInput_TechnologyParameter_DeviceType_cacti_5finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cacti_5finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CactiInput_TechnologyParameter_InterconnectType_cacti_5finterface_2eproto;
class CactiInput_TechnologyParameter_DeviceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CactiInput_TechnologyParameter_DeviceType> _instance;
} _CactiInput_TechnologyParameter_DeviceType_default_instance_;
class CactiInput_TechnologyParameter_InterconnectTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CactiInput_TechnologyParameter_InterconnectType> _instance;
} _CactiInput_TechnologyParameter_InterconnectType_default_instance_;
class CactiInput_TechnologyParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CactiInput_TechnologyParameter> _instance;
} _CactiInput_TechnologyParameter_default_instance_;
class CactiInput_ConstParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CactiInput_ConstParameter> _instance;
} _CactiInput_ConstParameter_default_instance_;
class CactiInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CactiInput> _instance;
} _CactiInput_default_instance_;
static void InitDefaultsscc_info_CactiInput_cacti_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CactiInput_default_instance_;
    new (ptr) ::CactiInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CactiInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CactiInput_cacti_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CactiInput_cacti_5finterface_2eproto}, {
      &scc_info_CactiInput_TechnologyParameter_cacti_5finterface_2eproto.base,
      &scc_info_CactiInput_ConstParameter_cacti_5finterface_2eproto.base,}};

static void InitDefaultsscc_info_CactiInput_ConstParameter_cacti_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CactiInput_ConstParameter_default_instance_;
    new (ptr) ::CactiInput_ConstParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CactiInput_ConstParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CactiInput_ConstParameter_cacti_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CactiInput_ConstParameter_cacti_5finterface_2eproto}, {}};

static void InitDefaultsscc_info_CactiInput_TechnologyParameter_cacti_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CactiInput_TechnologyParameter_default_instance_;
    new (ptr) ::CactiInput_TechnologyParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CactiInput_TechnologyParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CactiInput_TechnologyParameter_cacti_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CactiInput_TechnologyParameter_cacti_5finterface_2eproto}, {
      &scc_info_CactiInput_TechnologyParameter_DeviceType_cacti_5finterface_2eproto.base,
      &scc_info_CactiInput_TechnologyParameter_InterconnectType_cacti_5finterface_2eproto.base,}};

static void InitDefaultsscc_info_CactiInput_TechnologyParameter_DeviceType_cacti_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CactiInput_TechnologyParameter_DeviceType_default_instance_;
    new (ptr) ::CactiInput_TechnologyParameter_DeviceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CactiInput_TechnologyParameter_DeviceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CactiInput_TechnologyParameter_DeviceType_cacti_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CactiInput_TechnologyParameter_DeviceType_cacti_5finterface_2eproto}, {}};

static void InitDefaultsscc_info_CactiInput_TechnologyParameter_InterconnectType_cacti_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CactiInput_TechnologyParameter_InterconnectType_default_instance_;
    new (ptr) ::CactiInput_TechnologyParameter_InterconnectType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CactiInput_TechnologyParameter_InterconnectType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CactiInput_TechnologyParameter_InterconnectType_cacti_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CactiInput_TechnologyParameter_InterconnectType_cacti_5finterface_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cacti_5finterface_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cacti_5finterface_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cacti_5finterface_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cacti_5finterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, r_nch_on_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, r_pch_on_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, vdd_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, vth_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, vcc_min_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, i_on_n_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, i_on_p_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, i_off_n_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, i_off_p_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, i_g_on_n_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, i_g_on_p_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_DeviceType, n_to_p_eff_curr_drv_ratio_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_InterconnectType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_InterconnectType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_InterconnectType, r_per_um_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter_InterconnectType, r_per_um_mult_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, sram_cell_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, dram_acc_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, dram_wl_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, peri_global_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, wire_local_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, wire_inside_mat_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, wire_outside_mat_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, vpp_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, dram_cell_i_on_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, dram_cell_vdd_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_TechnologyParameter, cache_sz_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CactiInput_ConstParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_ConstParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CactiInput_ConstParameter, cu_resistivity_),
  PROTOBUF_FIELD_OFFSET(::CactiInput_ConstParameter, bulk_cu_resistivity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CactiInput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CactiInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CactiInput, config_file_),
  PROTOBUF_FIELD_OFFSET(::CactiInput, tech_param_),
  PROTOBUF_FIELD_OFFSET(::CactiInput, const_param_),
  PROTOBUF_FIELD_OFFSET(::CactiInput, dyn_param_prefix_),
  PROTOBUF_FIELD_OFFSET(::CactiInput, wire_config_),
  0,
  3,
  4,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::CactiInput_TechnologyParameter_DeviceType)},
  { 29, 36, sizeof(::CactiInput_TechnologyParameter_InterconnectType)},
  { 38, 54, sizeof(::CactiInput_TechnologyParameter)},
  { 65, 72, sizeof(::CactiInput_ConstParameter)},
  { 74, 84, sizeof(::CactiInput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CactiInput_TechnologyParameter_DeviceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CactiInput_TechnologyParameter_InterconnectType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CactiInput_TechnologyParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CactiInput_ConstParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CactiInput_default_instance_),
};

const char descriptor_table_protodef_cacti_5finterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025cacti_interface.proto\"\337\010\n\nCactiInput\022\023"
  "\n\013config_file\030\001 \002(\t\0223\n\ntech_param\030\002 \001(\0132"
  "\037.CactiInput.TechnologyParameter\022/\n\013cons"
  "t_param\030\003 \001(\0132\032.CactiInput.ConstParamete"
  "r\022\030\n\020dyn_param_prefix\030\004 \001(\t\022\023\n\013wire_conf"
  "ig\030\005 \001(\t\032\337\006\n\023TechnologyParameter\022=\n\tsram"
  "_cell\030\001 \001(\0132*.CactiInput.TechnologyParam"
  "eter.DeviceType\022<\n\010dram_acc\030\002 \001(\0132*.Cact"
  "iInput.TechnologyParameter.DeviceType\022;\n"
  "\007dram_wl\030\003 \001(\0132*.CactiInput.TechnologyPa"
  "rameter.DeviceType\022\?\n\013peri_global\030\004 \001(\0132"
  "*.CactiInput.TechnologyParameter.DeviceT"
  "ype\022D\n\nwire_local\030\005 \001(\01320.CactiInput.Tec"
  "hnologyParameter.InterconnectType\022I\n\017wir"
  "e_inside_mat\030\006 \001(\01320.CactiInput.Technolo"
  "gyParameter.InterconnectType\022J\n\020wire_out"
  "side_mat\030\007 \001(\01320.CactiInput.TechnologyPa"
  "rameter.InterconnectType\022\013\n\003vpp\030\010 \001(\001\022\026\n"
  "\016dram_cell_I_on\030\t \001(\001\022\025\n\rdram_cell_Vdd\030\n"
  " \001(\001\022\020\n\010cache_sz\030\013 \001(\005\032\344\001\n\nDeviceType\022\020\n"
  "\010R_nch_on\030\001 \001(\001\022\020\n\010R_pch_on\030\002 \001(\001\022\013\n\003Vdd"
  "\030\003 \001(\001\022\013\n\003Vth\030\004 \001(\001\022\017\n\007Vcc_min\030\005 \001(\001\022\016\n\006"
  "I_on_n\030\006 \001(\001\022\016\n\006I_on_p\030\007 \001(\001\022\017\n\007I_off_n\030"
  "\010 \001(\001\022\017\n\007I_off_p\030\t \001(\001\022\020\n\010I_g_on_n\030\n \001(\001"
  "\022\020\n\010I_g_on_p\030\013 \001(\001\022!\n\031n_to_p_eff_curr_dr"
  "v_ratio\030\014 \001(\001\032;\n\020InterconnectType\022\020\n\010R_p"
  "er_um\030\001 \001(\001\022\025\n\rR_per_um_mult\030\002 \001(\001\032E\n\016Co"
  "nstParameter\022\026\n\016CU_RESISTIVITY\030\001 \001(\001\022\033\n\023"
  "BULK_CU_RESISTIVITY\030\002 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cacti_5finterface_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cacti_5finterface_2eproto_sccs[5] = {
  &scc_info_CactiInput_cacti_5finterface_2eproto.base,
  &scc_info_CactiInput_ConstParameter_cacti_5finterface_2eproto.base,
  &scc_info_CactiInput_TechnologyParameter_cacti_5finterface_2eproto.base,
  &scc_info_CactiInput_TechnologyParameter_DeviceType_cacti_5finterface_2eproto.base,
  &scc_info_CactiInput_TechnologyParameter_InterconnectType_cacti_5finterface_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cacti_5finterface_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cacti_5finterface_2eproto = {
  false, false, descriptor_table_protodef_cacti_5finterface_2eproto, "cacti_interface.proto", 1145,
  &descriptor_table_cacti_5finterface_2eproto_once, descriptor_table_cacti_5finterface_2eproto_sccs, descriptor_table_cacti_5finterface_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_cacti_5finterface_2eproto::offsets,
  file_level_metadata_cacti_5finterface_2eproto, 5, file_level_enum_descriptors_cacti_5finterface_2eproto, file_level_service_descriptors_cacti_5finterface_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cacti_5finterface_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cacti_5finterface_2eproto)), true);

// ===================================================================

void CactiInput_TechnologyParameter_DeviceType::InitAsDefaultInstance() {
}
class CactiInput_TechnologyParameter_DeviceType::_Internal {
 public:
  using HasBits = decltype(std::declval<CactiInput_TechnologyParameter_DeviceType>()._has_bits_);
  static void set_has_r_nch_on(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_r_pch_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vdd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vcc_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_i_on_n(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_i_on_p(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_i_off_n(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_i_off_p(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_i_g_on_n(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_i_g_on_p(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_n_to_p_eff_curr_drv_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CactiInput_TechnologyParameter_DeviceType::CactiInput_TechnologyParameter_DeviceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CactiInput.TechnologyParameter.DeviceType)
}
CactiInput_TechnologyParameter_DeviceType::CactiInput_TechnologyParameter_DeviceType(const CactiInput_TechnologyParameter_DeviceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_nch_on_, &from.r_nch_on_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_to_p_eff_curr_drv_ratio_) -
    reinterpret_cast<char*>(&r_nch_on_)) + sizeof(n_to_p_eff_curr_drv_ratio_));
  // @@protoc_insertion_point(copy_constructor:CactiInput.TechnologyParameter.DeviceType)
}

void CactiInput_TechnologyParameter_DeviceType::SharedCtor() {
  ::memset(&r_nch_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_to_p_eff_curr_drv_ratio_) -
      reinterpret_cast<char*>(&r_nch_on_)) + sizeof(n_to_p_eff_curr_drv_ratio_));
}

CactiInput_TechnologyParameter_DeviceType::~CactiInput_TechnologyParameter_DeviceType() {
  // @@protoc_insertion_point(destructor:CactiInput.TechnologyParameter.DeviceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CactiInput_TechnologyParameter_DeviceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CactiInput_TechnologyParameter_DeviceType::ArenaDtor(void* object) {
  CactiInput_TechnologyParameter_DeviceType* _this = reinterpret_cast< CactiInput_TechnologyParameter_DeviceType* >(object);
  (void)_this;
}
void CactiInput_TechnologyParameter_DeviceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CactiInput_TechnologyParameter_DeviceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CactiInput_TechnologyParameter_DeviceType& CactiInput_TechnologyParameter_DeviceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CactiInput_TechnologyParameter_DeviceType_cacti_5finterface_2eproto.base);
  return *internal_default_instance();
}


void CactiInput_TechnologyParameter_DeviceType::Clear() {
// @@protoc_insertion_point(message_clear_start:CactiInput.TechnologyParameter.DeviceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&r_nch_on_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&i_off_n_) -
        reinterpret_cast<char*>(&r_nch_on_)) + sizeof(i_off_n_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&i_off_p_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&n_to_p_eff_curr_drv_ratio_) -
        reinterpret_cast<char*>(&i_off_p_)) + sizeof(n_to_p_eff_curr_drv_ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CactiInput_TechnologyParameter_DeviceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double R_nch_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_r_nch_on(&has_bits);
          r_nch_on_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double R_pch_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_r_pch_on(&has_bits);
          r_pch_on_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double Vdd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_vdd(&has_bits);
          vdd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double Vth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_vth(&has_bits);
          vth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double Vcc_min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_vcc_min(&has_bits);
          vcc_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double I_on_n = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_i_on_n(&has_bits);
          i_on_n_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double I_on_p = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_i_on_p(&has_bits);
          i_on_p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double I_off_n = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_i_off_n(&has_bits);
          i_off_n_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double I_off_p = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_i_off_p(&has_bits);
          i_off_p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double I_g_on_n = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_i_g_on_n(&has_bits);
          i_g_on_n_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double I_g_on_p = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_i_g_on_p(&has_bits);
          i_g_on_p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double n_to_p_eff_curr_drv_ratio = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_n_to_p_eff_curr_drv_ratio(&has_bits);
          n_to_p_eff_curr_drv_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CactiInput_TechnologyParameter_DeviceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CactiInput.TechnologyParameter.DeviceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double R_nch_on = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_r_nch_on(), target);
  }

  // optional double R_pch_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_r_pch_on(), target);
  }

  // optional double Vdd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_vdd(), target);
  }

  // optional double Vth = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_vth(), target);
  }

  // optional double Vcc_min = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_vcc_min(), target);
  }

  // optional double I_on_n = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_i_on_n(), target);
  }

  // optional double I_on_p = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_i_on_p(), target);
  }

  // optional double I_off_n = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_i_off_n(), target);
  }

  // optional double I_off_p = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_i_off_p(), target);
  }

  // optional double I_g_on_n = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_i_g_on_n(), target);
  }

  // optional double I_g_on_p = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_i_g_on_p(), target);
  }

  // optional double n_to_p_eff_curr_drv_ratio = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_n_to_p_eff_curr_drv_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CactiInput.TechnologyParameter.DeviceType)
  return target;
}

size_t CactiInput_TechnologyParameter_DeviceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CactiInput.TechnologyParameter.DeviceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double R_nch_on = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double R_pch_on = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double Vdd = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double Vth = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double Vcc_min = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double I_on_n = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double I_on_p = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double I_off_n = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double I_off_p = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double I_g_on_n = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double I_g_on_p = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double n_to_p_eff_curr_drv_ratio = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CactiInput_TechnologyParameter_DeviceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CactiInput.TechnologyParameter.DeviceType)
  GOOGLE_DCHECK_NE(&from, this);
  const CactiInput_TechnologyParameter_DeviceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CactiInput_TechnologyParameter_DeviceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CactiInput.TechnologyParameter.DeviceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CactiInput.TechnologyParameter.DeviceType)
    MergeFrom(*source);
  }
}

void CactiInput_TechnologyParameter_DeviceType::MergeFrom(const CactiInput_TechnologyParameter_DeviceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CactiInput.TechnologyParameter.DeviceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      r_nch_on_ = from.r_nch_on_;
    }
    if (cached_has_bits & 0x00000002u) {
      r_pch_on_ = from.r_pch_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      vdd_ = from.vdd_;
    }
    if (cached_has_bits & 0x00000008u) {
      vth_ = from.vth_;
    }
    if (cached_has_bits & 0x00000010u) {
      vcc_min_ = from.vcc_min_;
    }
    if (cached_has_bits & 0x00000020u) {
      i_on_n_ = from.i_on_n_;
    }
    if (cached_has_bits & 0x00000040u) {
      i_on_p_ = from.i_on_p_;
    }
    if (cached_has_bits & 0x00000080u) {
      i_off_n_ = from.i_off_n_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      i_off_p_ = from.i_off_p_;
    }
    if (cached_has_bits & 0x00000200u) {
      i_g_on_n_ = from.i_g_on_n_;
    }
    if (cached_has_bits & 0x00000400u) {
      i_g_on_p_ = from.i_g_on_p_;
    }
    if (cached_has_bits & 0x00000800u) {
      n_to_p_eff_curr_drv_ratio_ = from.n_to_p_eff_curr_drv_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CactiInput_TechnologyParameter_DeviceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CactiInput.TechnologyParameter.DeviceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CactiInput_TechnologyParameter_DeviceType::CopyFrom(const CactiInput_TechnologyParameter_DeviceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CactiInput.TechnologyParameter.DeviceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CactiInput_TechnologyParameter_DeviceType::IsInitialized() const {
  return true;
}

void CactiInput_TechnologyParameter_DeviceType::InternalSwap(CactiInput_TechnologyParameter_DeviceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CactiInput_TechnologyParameter_DeviceType, n_to_p_eff_curr_drv_ratio_)
      + sizeof(CactiInput_TechnologyParameter_DeviceType::n_to_p_eff_curr_drv_ratio_)
      - PROTOBUF_FIELD_OFFSET(CactiInput_TechnologyParameter_DeviceType, r_nch_on_)>(
          reinterpret_cast<char*>(&r_nch_on_),
          reinterpret_cast<char*>(&other->r_nch_on_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CactiInput_TechnologyParameter_DeviceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CactiInput_TechnologyParameter_InterconnectType::InitAsDefaultInstance() {
}
class CactiInput_TechnologyParameter_InterconnectType::_Internal {
 public:
  using HasBits = decltype(std::declval<CactiInput_TechnologyParameter_InterconnectType>()._has_bits_);
  static void set_has_r_per_um(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_r_per_um_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CactiInput_TechnologyParameter_InterconnectType::CactiInput_TechnologyParameter_InterconnectType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CactiInput.TechnologyParameter.InterconnectType)
}
CactiInput_TechnologyParameter_InterconnectType::CactiInput_TechnologyParameter_InterconnectType(const CactiInput_TechnologyParameter_InterconnectType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_per_um_, &from.r_per_um_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_per_um_mult_) -
    reinterpret_cast<char*>(&r_per_um_)) + sizeof(r_per_um_mult_));
  // @@protoc_insertion_point(copy_constructor:CactiInput.TechnologyParameter.InterconnectType)
}

void CactiInput_TechnologyParameter_InterconnectType::SharedCtor() {
  ::memset(&r_per_um_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_per_um_mult_) -
      reinterpret_cast<char*>(&r_per_um_)) + sizeof(r_per_um_mult_));
}

CactiInput_TechnologyParameter_InterconnectType::~CactiInput_TechnologyParameter_InterconnectType() {
  // @@protoc_insertion_point(destructor:CactiInput.TechnologyParameter.InterconnectType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CactiInput_TechnologyParameter_InterconnectType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CactiInput_TechnologyParameter_InterconnectType::ArenaDtor(void* object) {
  CactiInput_TechnologyParameter_InterconnectType* _this = reinterpret_cast< CactiInput_TechnologyParameter_InterconnectType* >(object);
  (void)_this;
}
void CactiInput_TechnologyParameter_InterconnectType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CactiInput_TechnologyParameter_InterconnectType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CactiInput_TechnologyParameter_InterconnectType& CactiInput_TechnologyParameter_InterconnectType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CactiInput_TechnologyParameter_InterconnectType_cacti_5finterface_2eproto.base);
  return *internal_default_instance();
}


void CactiInput_TechnologyParameter_InterconnectType::Clear() {
// @@protoc_insertion_point(message_clear_start:CactiInput.TechnologyParameter.InterconnectType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&r_per_um_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&r_per_um_mult_) -
        reinterpret_cast<char*>(&r_per_um_)) + sizeof(r_per_um_mult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CactiInput_TechnologyParameter_InterconnectType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double R_per_um = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_r_per_um(&has_bits);
          r_per_um_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double R_per_um_mult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_r_per_um_mult(&has_bits);
          r_per_um_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CactiInput_TechnologyParameter_InterconnectType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CactiInput.TechnologyParameter.InterconnectType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double R_per_um = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_r_per_um(), target);
  }

  // optional double R_per_um_mult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_r_per_um_mult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CactiInput.TechnologyParameter.InterconnectType)
  return target;
}

size_t CactiInput_TechnologyParameter_InterconnectType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CactiInput.TechnologyParameter.InterconnectType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double R_per_um = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double R_per_um_mult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CactiInput_TechnologyParameter_InterconnectType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CactiInput.TechnologyParameter.InterconnectType)
  GOOGLE_DCHECK_NE(&from, this);
  const CactiInput_TechnologyParameter_InterconnectType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CactiInput_TechnologyParameter_InterconnectType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CactiInput.TechnologyParameter.InterconnectType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CactiInput.TechnologyParameter.InterconnectType)
    MergeFrom(*source);
  }
}

void CactiInput_TechnologyParameter_InterconnectType::MergeFrom(const CactiInput_TechnologyParameter_InterconnectType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CactiInput.TechnologyParameter.InterconnectType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      r_per_um_ = from.r_per_um_;
    }
    if (cached_has_bits & 0x00000002u) {
      r_per_um_mult_ = from.r_per_um_mult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CactiInput_TechnologyParameter_InterconnectType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CactiInput.TechnologyParameter.InterconnectType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CactiInput_TechnologyParameter_InterconnectType::CopyFrom(const CactiInput_TechnologyParameter_InterconnectType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CactiInput.TechnologyParameter.InterconnectType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CactiInput_TechnologyParameter_InterconnectType::IsInitialized() const {
  return true;
}

void CactiInput_TechnologyParameter_InterconnectType::InternalSwap(CactiInput_TechnologyParameter_InterconnectType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CactiInput_TechnologyParameter_InterconnectType, r_per_um_mult_)
      + sizeof(CactiInput_TechnologyParameter_InterconnectType::r_per_um_mult_)
      - PROTOBUF_FIELD_OFFSET(CactiInput_TechnologyParameter_InterconnectType, r_per_um_)>(
          reinterpret_cast<char*>(&r_per_um_),
          reinterpret_cast<char*>(&other->r_per_um_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CactiInput_TechnologyParameter_InterconnectType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CactiInput_TechnologyParameter::InitAsDefaultInstance() {
  ::_CactiInput_TechnologyParameter_default_instance_._instance.get_mutable()->sram_cell_ = const_cast< ::CactiInput_TechnologyParameter_DeviceType*>(
      ::CactiInput_TechnologyParameter_DeviceType::internal_default_instance());
  ::_CactiInput_TechnologyParameter_default_instance_._instance.get_mutable()->dram_acc_ = const_cast< ::CactiInput_TechnologyParameter_DeviceType*>(
      ::CactiInput_TechnologyParameter_DeviceType::internal_default_instance());
  ::_CactiInput_TechnologyParameter_default_instance_._instance.get_mutable()->dram_wl_ = const_cast< ::CactiInput_TechnologyParameter_DeviceType*>(
      ::CactiInput_TechnologyParameter_DeviceType::internal_default_instance());
  ::_CactiInput_TechnologyParameter_default_instance_._instance.get_mutable()->peri_global_ = const_cast< ::CactiInput_TechnologyParameter_DeviceType*>(
      ::CactiInput_TechnologyParameter_DeviceType::internal_default_instance());
  ::_CactiInput_TechnologyParameter_default_instance_._instance.get_mutable()->wire_local_ = const_cast< ::CactiInput_TechnologyParameter_InterconnectType*>(
      ::CactiInput_TechnologyParameter_InterconnectType::internal_default_instance());
  ::_CactiInput_TechnologyParameter_default_instance_._instance.get_mutable()->wire_inside_mat_ = const_cast< ::CactiInput_TechnologyParameter_InterconnectType*>(
      ::CactiInput_TechnologyParameter_InterconnectType::internal_default_instance());
  ::_CactiInput_TechnologyParameter_default_instance_._instance.get_mutable()->wire_outside_mat_ = const_cast< ::CactiInput_TechnologyParameter_InterconnectType*>(
      ::CactiInput_TechnologyParameter_InterconnectType::internal_default_instance());
}
class CactiInput_TechnologyParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<CactiInput_TechnologyParameter>()._has_bits_);
  static const ::CactiInput_TechnologyParameter_DeviceType& sram_cell(const CactiInput_TechnologyParameter* msg);
  static void set_has_sram_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CactiInput_TechnologyParameter_DeviceType& dram_acc(const CactiInput_TechnologyParameter* msg);
  static void set_has_dram_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CactiInput_TechnologyParameter_DeviceType& dram_wl(const CactiInput_TechnologyParameter* msg);
  static void set_has_dram_wl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CactiInput_TechnologyParameter_DeviceType& peri_global(const CactiInput_TechnologyParameter* msg);
  static void set_has_peri_global(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CactiInput_TechnologyParameter_InterconnectType& wire_local(const CactiInput_TechnologyParameter* msg);
  static void set_has_wire_local(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CactiInput_TechnologyParameter_InterconnectType& wire_inside_mat(const CactiInput_TechnologyParameter* msg);
  static void set_has_wire_inside_mat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CactiInput_TechnologyParameter_InterconnectType& wire_outside_mat(const CactiInput_TechnologyParameter* msg);
  static void set_has_wire_outside_mat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vpp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dram_cell_i_on(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dram_cell_vdd(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cache_sz(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::CactiInput_TechnologyParameter_DeviceType&
CactiInput_TechnologyParameter::_Internal::sram_cell(const CactiInput_TechnologyParameter* msg) {
  return *msg->sram_cell_;
}
const ::CactiInput_TechnologyParameter_DeviceType&
CactiInput_TechnologyParameter::_Internal::dram_acc(const CactiInput_TechnologyParameter* msg) {
  return *msg->dram_acc_;
}
const ::CactiInput_TechnologyParameter_DeviceType&
CactiInput_TechnologyParameter::_Internal::dram_wl(const CactiInput_TechnologyParameter* msg) {
  return *msg->dram_wl_;
}
const ::CactiInput_TechnologyParameter_DeviceType&
CactiInput_TechnologyParameter::_Internal::peri_global(const CactiInput_TechnologyParameter* msg) {
  return *msg->peri_global_;
}
const ::CactiInput_TechnologyParameter_InterconnectType&
CactiInput_TechnologyParameter::_Internal::wire_local(const CactiInput_TechnologyParameter* msg) {
  return *msg->wire_local_;
}
const ::CactiInput_TechnologyParameter_InterconnectType&
CactiInput_TechnologyParameter::_Internal::wire_inside_mat(const CactiInput_TechnologyParameter* msg) {
  return *msg->wire_inside_mat_;
}
const ::CactiInput_TechnologyParameter_InterconnectType&
CactiInput_TechnologyParameter::_Internal::wire_outside_mat(const CactiInput_TechnologyParameter* msg) {
  return *msg->wire_outside_mat_;
}
CactiInput_TechnologyParameter::CactiInput_TechnologyParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CactiInput.TechnologyParameter)
}
CactiInput_TechnologyParameter::CactiInput_TechnologyParameter(const CactiInput_TechnologyParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sram_cell()) {
    sram_cell_ = new ::CactiInput_TechnologyParameter_DeviceType(*from.sram_cell_);
  } else {
    sram_cell_ = nullptr;
  }
  if (from._internal_has_dram_acc()) {
    dram_acc_ = new ::CactiInput_TechnologyParameter_DeviceType(*from.dram_acc_);
  } else {
    dram_acc_ = nullptr;
  }
  if (from._internal_has_dram_wl()) {
    dram_wl_ = new ::CactiInput_TechnologyParameter_DeviceType(*from.dram_wl_);
  } else {
    dram_wl_ = nullptr;
  }
  if (from._internal_has_peri_global()) {
    peri_global_ = new ::CactiInput_TechnologyParameter_DeviceType(*from.peri_global_);
  } else {
    peri_global_ = nullptr;
  }
  if (from._internal_has_wire_local()) {
    wire_local_ = new ::CactiInput_TechnologyParameter_InterconnectType(*from.wire_local_);
  } else {
    wire_local_ = nullptr;
  }
  if (from._internal_has_wire_inside_mat()) {
    wire_inside_mat_ = new ::CactiInput_TechnologyParameter_InterconnectType(*from.wire_inside_mat_);
  } else {
    wire_inside_mat_ = nullptr;
  }
  if (from._internal_has_wire_outside_mat()) {
    wire_outside_mat_ = new ::CactiInput_TechnologyParameter_InterconnectType(*from.wire_outside_mat_);
  } else {
    wire_outside_mat_ = nullptr;
  }
  ::memcpy(&vpp_, &from.vpp_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_sz_) -
    reinterpret_cast<char*>(&vpp_)) + sizeof(cache_sz_));
  // @@protoc_insertion_point(copy_constructor:CactiInput.TechnologyParameter)
}

void CactiInput_TechnologyParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CactiInput_TechnologyParameter_cacti_5finterface_2eproto.base);
  ::memset(&sram_cell_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_sz_) -
      reinterpret_cast<char*>(&sram_cell_)) + sizeof(cache_sz_));
}

CactiInput_TechnologyParameter::~CactiInput_TechnologyParameter() {
  // @@protoc_insertion_point(destructor:CactiInput.TechnologyParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CactiInput_TechnologyParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sram_cell_;
  if (this != internal_default_instance()) delete dram_acc_;
  if (this != internal_default_instance()) delete dram_wl_;
  if (this != internal_default_instance()) delete peri_global_;
  if (this != internal_default_instance()) delete wire_local_;
  if (this != internal_default_instance()) delete wire_inside_mat_;
  if (this != internal_default_instance()) delete wire_outside_mat_;
}

void CactiInput_TechnologyParameter::ArenaDtor(void* object) {
  CactiInput_TechnologyParameter* _this = reinterpret_cast< CactiInput_TechnologyParameter* >(object);
  (void)_this;
}
void CactiInput_TechnologyParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CactiInput_TechnologyParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CactiInput_TechnologyParameter& CactiInput_TechnologyParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CactiInput_TechnologyParameter_cacti_5finterface_2eproto.base);
  return *internal_default_instance();
}


void CactiInput_TechnologyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:CactiInput.TechnologyParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sram_cell_ != nullptr);
      sram_cell_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dram_acc_ != nullptr);
      dram_acc_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dram_wl_ != nullptr);
      dram_wl_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(peri_global_ != nullptr);
      peri_global_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(wire_local_ != nullptr);
      wire_local_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(wire_inside_mat_ != nullptr);
      wire_inside_mat_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(wire_outside_mat_ != nullptr);
      wire_outside_mat_->Clear();
    }
  }
  vpp_ = 0;
  if (cached_has_bits & 0x00000700u) {
    ::memset(&dram_cell_i_on_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cache_sz_) -
        reinterpret_cast<char*>(&dram_cell_i_on_)) + sizeof(cache_sz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CactiInput_TechnologyParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CactiInput.TechnologyParameter.DeviceType sram_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sram_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CactiInput.TechnologyParameter.DeviceType dram_acc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dram_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CactiInput.TechnologyParameter.DeviceType dram_wl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dram_wl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CactiInput.TechnologyParameter.DeviceType peri_global = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_peri_global(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CactiInput.TechnologyParameter.InterconnectType wire_local = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_wire_local(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CactiInput.TechnologyParameter.InterconnectType wire_inside_mat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_wire_inside_mat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CactiInput.TechnologyParameter.InterconnectType wire_outside_mat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_wire_outside_mat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double vpp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_vpp(&has_bits);
          vpp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dram_cell_I_on = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_dram_cell_i_on(&has_bits);
          dram_cell_i_on_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dram_cell_Vdd = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_dram_cell_vdd(&has_bits);
          dram_cell_vdd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 cache_sz = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_cache_sz(&has_bits);
          cache_sz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CactiInput_TechnologyParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CactiInput.TechnologyParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CactiInput.TechnologyParameter.DeviceType sram_cell = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sram_cell(this), target, stream);
  }

  // optional .CactiInput.TechnologyParameter.DeviceType dram_acc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dram_acc(this), target, stream);
  }

  // optional .CactiInput.TechnologyParameter.DeviceType dram_wl = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dram_wl(this), target, stream);
  }

  // optional .CactiInput.TechnologyParameter.DeviceType peri_global = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::peri_global(this), target, stream);
  }

  // optional .CactiInput.TechnologyParameter.InterconnectType wire_local = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::wire_local(this), target, stream);
  }

  // optional .CactiInput.TechnologyParameter.InterconnectType wire_inside_mat = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::wire_inside_mat(this), target, stream);
  }

  // optional .CactiInput.TechnologyParameter.InterconnectType wire_outside_mat = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::wire_outside_mat(this), target, stream);
  }

  // optional double vpp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_vpp(), target);
  }

  // optional double dram_cell_I_on = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_dram_cell_i_on(), target);
  }

  // optional double dram_cell_Vdd = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_dram_cell_vdd(), target);
  }

  // optional int32 cache_sz = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_cache_sz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CactiInput.TechnologyParameter)
  return target;
}

size_t CactiInput_TechnologyParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CactiInput.TechnologyParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CactiInput.TechnologyParameter.DeviceType sram_cell = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sram_cell_);
    }

    // optional .CactiInput.TechnologyParameter.DeviceType dram_acc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dram_acc_);
    }

    // optional .CactiInput.TechnologyParameter.DeviceType dram_wl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dram_wl_);
    }

    // optional .CactiInput.TechnologyParameter.DeviceType peri_global = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *peri_global_);
    }

    // optional .CactiInput.TechnologyParameter.InterconnectType wire_local = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wire_local_);
    }

    // optional .CactiInput.TechnologyParameter.InterconnectType wire_inside_mat = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wire_inside_mat_);
    }

    // optional .CactiInput.TechnologyParameter.InterconnectType wire_outside_mat = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wire_outside_mat_);
    }

    // optional double vpp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double dram_cell_I_on = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double dram_cell_Vdd = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int32 cache_sz = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cache_sz());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CactiInput_TechnologyParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CactiInput.TechnologyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CactiInput_TechnologyParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CactiInput_TechnologyParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CactiInput.TechnologyParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CactiInput.TechnologyParameter)
    MergeFrom(*source);
  }
}

void CactiInput_TechnologyParameter::MergeFrom(const CactiInput_TechnologyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CactiInput.TechnologyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sram_cell()->::CactiInput_TechnologyParameter_DeviceType::MergeFrom(from._internal_sram_cell());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dram_acc()->::CactiInput_TechnologyParameter_DeviceType::MergeFrom(from._internal_dram_acc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dram_wl()->::CactiInput_TechnologyParameter_DeviceType::MergeFrom(from._internal_dram_wl());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_peri_global()->::CactiInput_TechnologyParameter_DeviceType::MergeFrom(from._internal_peri_global());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_wire_local()->::CactiInput_TechnologyParameter_InterconnectType::MergeFrom(from._internal_wire_local());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_wire_inside_mat()->::CactiInput_TechnologyParameter_InterconnectType::MergeFrom(from._internal_wire_inside_mat());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_wire_outside_mat()->::CactiInput_TechnologyParameter_InterconnectType::MergeFrom(from._internal_wire_outside_mat());
    }
    if (cached_has_bits & 0x00000080u) {
      vpp_ = from.vpp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      dram_cell_i_on_ = from.dram_cell_i_on_;
    }
    if (cached_has_bits & 0x00000200u) {
      dram_cell_vdd_ = from.dram_cell_vdd_;
    }
    if (cached_has_bits & 0x00000400u) {
      cache_sz_ = from.cache_sz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CactiInput_TechnologyParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CactiInput.TechnologyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CactiInput_TechnologyParameter::CopyFrom(const CactiInput_TechnologyParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CactiInput.TechnologyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CactiInput_TechnologyParameter::IsInitialized() const {
  return true;
}

void CactiInput_TechnologyParameter::InternalSwap(CactiInput_TechnologyParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CactiInput_TechnologyParameter, cache_sz_)
      + sizeof(CactiInput_TechnologyParameter::cache_sz_)
      - PROTOBUF_FIELD_OFFSET(CactiInput_TechnologyParameter, sram_cell_)>(
          reinterpret_cast<char*>(&sram_cell_),
          reinterpret_cast<char*>(&other->sram_cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CactiInput_TechnologyParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CactiInput_ConstParameter::InitAsDefaultInstance() {
}
class CactiInput_ConstParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<CactiInput_ConstParameter>()._has_bits_);
  static void set_has_cu_resistivity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bulk_cu_resistivity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CactiInput_ConstParameter::CactiInput_ConstParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CactiInput.ConstParameter)
}
CactiInput_ConstParameter::CactiInput_ConstParameter(const CactiInput_ConstParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cu_resistivity_, &from.cu_resistivity_,
    static_cast<size_t>(reinterpret_cast<char*>(&bulk_cu_resistivity_) -
    reinterpret_cast<char*>(&cu_resistivity_)) + sizeof(bulk_cu_resistivity_));
  // @@protoc_insertion_point(copy_constructor:CactiInput.ConstParameter)
}

void CactiInput_ConstParameter::SharedCtor() {
  ::memset(&cu_resistivity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bulk_cu_resistivity_) -
      reinterpret_cast<char*>(&cu_resistivity_)) + sizeof(bulk_cu_resistivity_));
}

CactiInput_ConstParameter::~CactiInput_ConstParameter() {
  // @@protoc_insertion_point(destructor:CactiInput.ConstParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CactiInput_ConstParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CactiInput_ConstParameter::ArenaDtor(void* object) {
  CactiInput_ConstParameter* _this = reinterpret_cast< CactiInput_ConstParameter* >(object);
  (void)_this;
}
void CactiInput_ConstParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CactiInput_ConstParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CactiInput_ConstParameter& CactiInput_ConstParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CactiInput_ConstParameter_cacti_5finterface_2eproto.base);
  return *internal_default_instance();
}


void CactiInput_ConstParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:CactiInput.ConstParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cu_resistivity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bulk_cu_resistivity_) -
        reinterpret_cast<char*>(&cu_resistivity_)) + sizeof(bulk_cu_resistivity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CactiInput_ConstParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double CU_RESISTIVITY = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_cu_resistivity(&has_bits);
          cu_resistivity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double BULK_CU_RESISTIVITY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_bulk_cu_resistivity(&has_bits);
          bulk_cu_resistivity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CactiInput_ConstParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CactiInput.ConstParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double CU_RESISTIVITY = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_cu_resistivity(), target);
  }

  // optional double BULK_CU_RESISTIVITY = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_bulk_cu_resistivity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CactiInput.ConstParameter)
  return target;
}

size_t CactiInput_ConstParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CactiInput.ConstParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double CU_RESISTIVITY = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double BULK_CU_RESISTIVITY = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CactiInput_ConstParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CactiInput.ConstParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CactiInput_ConstParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CactiInput_ConstParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CactiInput.ConstParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CactiInput.ConstParameter)
    MergeFrom(*source);
  }
}

void CactiInput_ConstParameter::MergeFrom(const CactiInput_ConstParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CactiInput.ConstParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cu_resistivity_ = from.cu_resistivity_;
    }
    if (cached_has_bits & 0x00000002u) {
      bulk_cu_resistivity_ = from.bulk_cu_resistivity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CactiInput_ConstParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CactiInput.ConstParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CactiInput_ConstParameter::CopyFrom(const CactiInput_ConstParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CactiInput.ConstParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CactiInput_ConstParameter::IsInitialized() const {
  return true;
}

void CactiInput_ConstParameter::InternalSwap(CactiInput_ConstParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CactiInput_ConstParameter, bulk_cu_resistivity_)
      + sizeof(CactiInput_ConstParameter::bulk_cu_resistivity_)
      - PROTOBUF_FIELD_OFFSET(CactiInput_ConstParameter, cu_resistivity_)>(
          reinterpret_cast<char*>(&cu_resistivity_),
          reinterpret_cast<char*>(&other->cu_resistivity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CactiInput_ConstParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CactiInput::InitAsDefaultInstance() {
  ::_CactiInput_default_instance_._instance.get_mutable()->tech_param_ = const_cast< ::CactiInput_TechnologyParameter*>(
      ::CactiInput_TechnologyParameter::internal_default_instance());
  ::_CactiInput_default_instance_._instance.get_mutable()->const_param_ = const_cast< ::CactiInput_ConstParameter*>(
      ::CactiInput_ConstParameter::internal_default_instance());
}
class CactiInput::_Internal {
 public:
  using HasBits = decltype(std::declval<CactiInput>()._has_bits_);
  static void set_has_config_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CactiInput_TechnologyParameter& tech_param(const CactiInput* msg);
  static void set_has_tech_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CactiInput_ConstParameter& const_param(const CactiInput* msg);
  static void set_has_const_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dyn_param_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wire_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CactiInput_TechnologyParameter&
CactiInput::_Internal::tech_param(const CactiInput* msg) {
  return *msg->tech_param_;
}
const ::CactiInput_ConstParameter&
CactiInput::_Internal::const_param(const CactiInput* msg) {
  return *msg->const_param_;
}
CactiInput::CactiInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CactiInput)
}
CactiInput::CactiInput(const CactiInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_config_file()) {
    config_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_config_file(),
      GetArena());
  }
  dyn_param_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dyn_param_prefix()) {
    dyn_param_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dyn_param_prefix(),
      GetArena());
  }
  wire_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_wire_config()) {
    wire_config_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_wire_config(),
      GetArena());
  }
  if (from._internal_has_tech_param()) {
    tech_param_ = new ::CactiInput_TechnologyParameter(*from.tech_param_);
  } else {
    tech_param_ = nullptr;
  }
  if (from._internal_has_const_param()) {
    const_param_ = new ::CactiInput_ConstParameter(*from.const_param_);
  } else {
    const_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CactiInput)
}

void CactiInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CactiInput_cacti_5finterface_2eproto.base);
  config_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dyn_param_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wire_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tech_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&const_param_) -
      reinterpret_cast<char*>(&tech_param_)) + sizeof(const_param_));
}

CactiInput::~CactiInput() {
  // @@protoc_insertion_point(destructor:CactiInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CactiInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  config_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dyn_param_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wire_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tech_param_;
  if (this != internal_default_instance()) delete const_param_;
}

void CactiInput::ArenaDtor(void* object) {
  CactiInput* _this = reinterpret_cast< CactiInput* >(object);
  (void)_this;
}
void CactiInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CactiInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CactiInput& CactiInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CactiInput_cacti_5finterface_2eproto.base);
  return *internal_default_instance();
}


void CactiInput::Clear() {
// @@protoc_insertion_point(message_clear_start:CactiInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      config_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      dyn_param_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      wire_config_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tech_param_ != nullptr);
      tech_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(const_param_ != nullptr);
      const_param_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CactiInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string config_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_config_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CactiInput.config_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CactiInput.TechnologyParameter tech_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tech_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CactiInput.ConstParameter const_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_const_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dyn_param_prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dyn_param_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CactiInput.dyn_param_prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string wire_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_wire_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CactiInput.wire_config");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CactiInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CactiInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string config_file = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_config_file().data(), static_cast<int>(this->_internal_config_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CactiInput.config_file");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_config_file(), target);
  }

  // optional .CactiInput.TechnologyParameter tech_param = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tech_param(this), target, stream);
  }

  // optional .CactiInput.ConstParameter const_param = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::const_param(this), target, stream);
  }

  // optional string dyn_param_prefix = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dyn_param_prefix().data(), static_cast<int>(this->_internal_dyn_param_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CactiInput.dyn_param_prefix");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dyn_param_prefix(), target);
  }

  // optional string wire_config = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_wire_config().data(), static_cast<int>(this->_internal_wire_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CactiInput.wire_config");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_wire_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CactiInput)
  return target;
}

size_t CactiInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CactiInput)
  size_t total_size = 0;

  // required string config_file = 1;
  if (_internal_has_config_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_file());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional string dyn_param_prefix = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dyn_param_prefix());
    }

    // optional string wire_config = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wire_config());
    }

    // optional .CactiInput.TechnologyParameter tech_param = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tech_param_);
    }

    // optional .CactiInput.ConstParameter const_param = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *const_param_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CactiInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CactiInput)
  GOOGLE_DCHECK_NE(&from, this);
  const CactiInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CactiInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CactiInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CactiInput)
    MergeFrom(*source);
  }
}

void CactiInput::MergeFrom(const CactiInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CactiInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_config_file(from._internal_config_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_dyn_param_prefix(from._internal_dyn_param_prefix());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_wire_config(from._internal_wire_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tech_param()->::CactiInput_TechnologyParameter::MergeFrom(from._internal_tech_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_const_param()->::CactiInput_ConstParameter::MergeFrom(from._internal_const_param());
    }
  }
}

void CactiInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CactiInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CactiInput::CopyFrom(const CactiInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CactiInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CactiInput::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CactiInput::InternalSwap(CactiInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  config_file_.Swap(&other->config_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dyn_param_prefix_.Swap(&other->dyn_param_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wire_config_.Swap(&other->wire_config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CactiInput, const_param_)
      + sizeof(CactiInput::const_param_)
      - PROTOBUF_FIELD_OFFSET(CactiInput, tech_param_)>(
          reinterpret_cast<char*>(&tech_param_),
          reinterpret_cast<char*>(&other->tech_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CactiInput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CactiInput_TechnologyParameter_DeviceType* Arena::CreateMaybeMessage< ::CactiInput_TechnologyParameter_DeviceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CactiInput_TechnologyParameter_DeviceType >(arena);
}
template<> PROTOBUF_NOINLINE ::CactiInput_TechnologyParameter_InterconnectType* Arena::CreateMaybeMessage< ::CactiInput_TechnologyParameter_InterconnectType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CactiInput_TechnologyParameter_InterconnectType >(arena);
}
template<> PROTOBUF_NOINLINE ::CactiInput_TechnologyParameter* Arena::CreateMaybeMessage< ::CactiInput_TechnologyParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CactiInput_TechnologyParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::CactiInput_ConstParameter* Arena::CreateMaybeMessage< ::CactiInput_ConstParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CactiInput_ConstParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::CactiInput* Arena::CreateMaybeMessage< ::CactiInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CactiInput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
